box:
  id: tcnksm/gox:1.5.1
dev:
  box:
    id: busybox
    cmd: /bin/sh
  steps:
    - internal/watch:
        code: |
          echo "starting nc listening on port 8000"
          nc -l -p 8000
        reload: false
    - internal/shell:
        cmd: /bin/sh
        code: |-
          echo "welcome to your shell"
          echo "stay a while, and listen"
build:
  steps:
    - install-packages:
        packages: openssh-client pkg-config libsystemd-journal-dev

    - add-to-known_hosts:
        hostname: github.com
        fingerprint: "16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48"

    - setup-go-workspace:
        package-dir: github.com/wercker/wercker

    - script:
        name: glide install
        code: |
          export GO15VENDOREXPERIMENT=1
          export GLIDE_VERSION=0.8.3
          curl -LO https://github.com/Masterminds/glide/releases/download/${GLIDE_VERSION}/glide-${GLIDE_VERSION}-linux-amd64.tar.gz
          tar -xvzf glide-${GLIDE_VERSION}-linux-amd64.tar.gz
          cp linux-amd64/glide ./
          ./glide install --quick

    - script:
        name: go vet
        code: |
            go get golang.org/x/tools/cmd/vet
            # Once we move to go 1.6 we can probably change this to go vet github.com/wercker/wercker
            for p in $(find -type d -not -path './vendor*' -not -path './.git*' -not -path './tests*' -not -path './Documentation*'); do
              echo "go vet for $p"
              go vet $(find "$p" -maxdepth 1 -name '*.go')
            done

    # - golint:
    #     exclude: vendor

    - script:
        name: go test
        code: go test $(./glide novendor)

    - script:
        name: clear out the build binaries
        code: |
            rm -rf $GOPATH/pkg

    - script:
        name: gox
        code: |
            gox \
            -ldflags="-X github.com/wercker/wercker/util.GitCommit=$WERCKER_GIT_COMMIT -X github.com/wercker/wercker/util.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/wercker/wercker/util.Compiled=$(date +%s)" \
              -os="linux darwin" \
              -arch="amd64 386" \
              -output "$WERCKER_OUTPUT_DIR/latest/{{.OS}}_{{.Arch}}/sentcli"

            cp -r $WERCKER_OUTPUT_DIR/latest/* $WERCKER_REPORT_ARTIFACTS_DIR
    - script:
        name: prepare
        code: |
            echo $WERCKER_GIT_COMMIT > $WERCKER_OUTPUT_DIR/HEAD
            cp -r $WERCKER_OUTPUT_DIR/latest $WERCKER_OUTPUT_DIR/$WERCKER_GIT_COMMIT

deploy:
  box: ubuntu:12.04
  steps:
    - s3sync:
        source-dir: "."
        delete-removed: false
        bucket-url: $AWS_BUCKET_URL/$WERCKER_GIT_BRANCH/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

  # This should be auto deployed when a commit is made to "master".
  beta:
    - script:
        name: version
        code: |
            export WERCKER_VERSION=$(./latest/linux_amd64/sentcli --version | awk '{print $3}')
            echo $WERCKER_VERSION
            ./latest/linux_amd64/sentcli version --json > ./latest/version.json

    - script:
        name: rename
        code: |
            find . -type f -name "sentcli" -exec bash -c 'mv "${0}" ${0/%sentcli/wercker}' {} \;

    - s3sync:
        source-dir: "./latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/beta/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

    - s3sync:
        source-dir: "./latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/dev/$WERCKER_VERSION/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

  # This should be manually deployed when we want to make new version available.
  stable:
    - script:
        name: version
        code: |
            export WERCKER_VERSION=$(./latest/linux_amd64/sentcli --version | awk '{print $3}')
            echo $WERCKER_VERSION
            ./latest/linux_amd64/sentcli version --json > ./latest/version.json

    - script:
        name: rename
        code: |
            find . -type f -name "sentcli" -exec bash -c 'mv "${0}" ${0/%sentcli/wercker}' {} \;

    - s3sync:
        source-dir: "./latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/stable/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

    - s3sync:
        source-dir: "./latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/versions/$WERCKER_VERSION/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

test:
    box:
      id: tcnksm/gox:1.5.1
      volumes: $CODE_PATH /var/run/docker.sock
    steps:
        - install-packages:
            packages: openssh-client pkg-config libsystemd-journal-dev

        - add-to-known_hosts:
            hostname: github.com
            fingerprint: "16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48"

        - setup-go-workspace:
            package-dir: github.com/wercker/wercker

        - script:
            name: glide install
            code: |
              export GO15VENDOREXPERIMENT=1
              export GLIDE_VERSION=0.8.3
              curl -LO https://github.com/Masterminds/glide/releases/download/${GLIDE_VERSION}/glide-${GLIDE_VERSION}-linux-amd64.tar.gz
              tar -xvzf glide-${GLIDE_VERSION}-linux-amd64.tar.gz
              cp linux-amd64/glide ./
              ./glide install --quick

        - script:
            name: clear out the build binaries
            code: |
                rm -rf $GOPATH/pkg

        - script:
            name: gox
            code: |
                gox \
                -ldflags="-X github.com/wercker/wercker/util.GitCommit=$WERCKER_GIT_COMMIT -X github.com/wercker/wercker/util.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/wercker/wercker/util.Compiled=$(date +%s)" \
                  -os="linux" \
                  -arch="amd64"\
                  -output "$WERCKER_OUTPUT_DIR/latest/{{.OS}}_{{.Arch}}/wercker"
        - script:
            code: |
                cp $WERCKER_OUTPUT_DIR/latest/linux_amd64/wercker $CODE_PATH
                cd $CODE_PATH
                $WERCKER_OUTPUT_DIR/latest/linux_amd64/./wercker b --build-id $WERCKER_BUILD_ID-1 --pipeline run-tests --enable-volumes

run-tests:
    steps:
        - script:
            code: |
                unset WERCKER_BUILD_ID
                cd $CODE_PATH
                ./test-all.sh
